import os
import glob
import pyrat.fileutils.gpri_files as gpf
import pyrat
import pyrat.gpri_utils
from types import SimpleNamespace
import re
import json





def reflector_list_from_config():
	reflectors = config['list_of_reflectors']
	azidx = [ref[1] for ref in reflectors]
	azidx_dec = [int(ref[1]/int(config['range_compression']['dec'])) for ref in reflectors]
	ridx = [ref[0] for ref in reflectors]
	undec_list = [ (r, az) for r, az in zip(ridx, azidx)]
	dec_list = [ (r, az) for r, az in zip(ridx, azidx_dec)]
	return undec_list, dec_list


#Include the necessary rules
include: pyrat.rules['slc_to_calibrated_c']
include: pyrat.rules['geocoding']


##list of reflectors
refl_list, refl_list_dec = reflector_list_from_config()
#prefix for all figures
figures_prefix = expand("outputs/img/{datetime}", datetime=config['datetime'])

#prefix with decimated location
figures_prefix_with_indices_dec = expand(expand("{{fp}}" + "_{ridx}_{azidx}", zip, ridx=[ref[0] for ref in refl_list],
azidx=[int(ref[1]/config['range_compression']['dec'])  for ref in refl_list]), fp=figures_prefix)

figures_prefix_with_indices = expand(expand("{{fp}}" + "_{ridx}_{azidx}", zip, ridx=[ref[0] for ref in refl_list],
azidx=[int(ref[1])  for ref in refl_list]), fp=figures_prefix)



#Polarisation signatures
signatures = expand("{prefixes}_{rx}_{proc}_signature.pdf", proc=['cal', 'flat'], rx='l', prefixes=figures_prefix_with_indices_dec)
#Oversampled phase response
ptarg_mph = expand("{prefixes}_{chan}_{proc}_mph_plot.pdf",proc=['corr', 'desq', 'chan'], chan=['AAAl','BBBl'], prefixes=figures_prefix_with_indices)
#Combined phase plot
phase_plot = expand( "{pf}_{chan}_{processing}_phase_plot.pdf", processing=['coreg', 'corr'], chan=['AAAl', 'BBBl'], pf=figures_prefix)
#Cloude pottier parameters
cp_params = expand("{pf}_l_{type}_gc_{param}.pdf", param=['H', 'alpha', 'pauli'], type=['cal', 'flat'], pf=figures_prefix)
#Pauli RGB
pauli = expand("{pf}_l_{type}_gc_pauli.pdf", param=['H', 'alpha', 'pauli'], type=['cal', 'flat'], pf=figures_prefix)
#Combined phase response
#Calibration report:
cal_report = expand("outputs/img/{slcname}_l_{type}_calibration_report.csv",slcname=config['datetime'], type=['flat', 'cal'])
#Phase center report
phc_report = expand("outputs/img/{slcname}_{chan}_{type}_phase_center_report.csv", slcname=config['datetime'], type=['coreg'], chan=['AAAl','BBBl'])
#Calibration parameters for each reflector
cal_resid =  expand("{prefixes}_{rx}_{proc}_cal_params.csv", proc=['cal', 'flat'], rx='l', prefixes=figures_prefix_with_indices_dec)



#This rule touches a file when done with the analyis.
#it used as a dirty solution while we wait for
#https://bitbucket.org/snakemake/snakemake/issues/93/subworkflow-rule-execution
rule done:
    input:
        phc_report,
        cal_report,
        signatures,
	    ptarg_mph,
	    phase_plot,
	    cp_params,
        cal_resid,
    output:
        touch('analysis.done')


#TODO fix this rule
#rule shapefile_from_reflectors:
#    input:
#        lut = 'geo/' + config['geocoding']['table_name'] + '.dem_to_gpri',
#        dem_seg = 'geo/' + config['geocoding']['table_name'] + '.dem_seg',
#        dem_seg_par = 'geo/' + config['geocoding']['table_name'] + '.dem_seg.par',
#        ref_par = config['geocoding']['ref_mli_par']
#    output:
#        shp = 'geo/' + config['geocoding']['table_name'] + '_reflectors' + '.shp',
#    run:
#        import fiona
#        from shapely.geometry import Point, mapping
#        from fiona.crs import from_epsg
#        import matplotlib.pyplot as plt
##        from_epsg(2056)
#        {'init': 'epsg:21781', 'no_defs': True}
#        schema = {
#            'geometry': 'Point',
#            'properties': {
#                       'type': 'str',},
#        }
#        #load lut
#        ref_par = gpf.par_to_dict(input.ref_par)
#        dem_seg_par = gpf.par_to_dict(input.dem_seg_par)
#        lut = gpf.load_binary(input.lut, ref_par['range_samples'])[::-1,:]
#        with fiona.open(output.shp, 'w', 'ESRI Shapefile', schema, crs=from_epsg(21781)) as of:
#            for ref in config['list_of_reflectors']:
#                ref_geo = lut[ref[0], ref[1]/config['range_compression']['dec']]#decimate azimuth index
#                ref_geo = (ref_geo.real + dem_seg_par['corner_east'][0],
#                 ref_geo.imag + (dem_seg_par['corner_north'][0] + dem_seg_par['post_north'][0]*dem_seg_par['width']))
#                of.write({
#                   'geometry': mapping(Point(*ref_geo)),
#                    'properties':
#                        {
#                            'type': 'pane',}})


###############################################################################
### Plot oversampled response
rule plot_mph:
    input:
        slc = "slc_{processing}/{slcname}_{chan}.slc",
    output:
        plot = "outputs/img/{slcname}_{ridx}_{azidx}_{chan}_{processing}_mph_plot.{ext}",
    script:
        "scripts/plot_mph.py"

##############################################################################
## Display polarization signature
rule pol_signature:
    input:
        C = expand("cov_{{type}}/{{slcname}}_{{rx}}.c{i}{j}",i=[0,1,2,3],j=[0,1,2,3]),
    output:
        x_sig_plot = "outputs/img/{slcname}_{ridx}_{azidx}_{rx}_{type}_signature_x.{ext}",
        co_sig_plot = "outputs/img/{slcname}_{ridx}_{azidx}_{rx}_{type}_signature.{ext}",
#        azplot = "outputs/img/{slcname}_{ridx}_{azidx}_{rx}_{type}_azplot.{ext}",
#        rplot = "outputs/img/{slcname}_{ridx}_{azidx}_{rx}_{type}_rplot.{ext}",
    params:
        C_root = "cov_{type}/{slcname}_{rx}",
        est_params = "outputs/img/{slcname}_{rx}_{azidx}_{rx}_{type}_est_params.csv",
    script:
        "scripts/plot_polarization_signature.py"


        

##############################################################################
## Estimate calibration residuals
rule cal_residuals:
    input:
        C = expand("cov_{{type}}/{{slcname}}_{{rx}}.c{i}{j}",i=[0,1,2,3],j=[0,1,2,3]),
    output:
        est_parameters = "outputs/img/{slcname}_{ridx}_{azidx}_{rx}_{type}_cal_params.csv",
    params:
        C_root = "cov_{type}/{slcname}_{rx}",
    script:
        "scripts/estimate_calibration_residuals.py"



##############################################################################
## Plot phase response before and after the correction
rule plot_phase_response:
    input:
        slc = "slc_{processing}/{slcname}_{chan}.slc",
    output:
        plot = "outputs/img/{slcname}_{chan}_{processing}_phase_plot.{ext}",
    params:
        ws=50,
    script:
        "scripts/plot_azimuth_phase.py"

##############################################################################
## Compute recap information on the TCRs
rule TCR_recap:
    input:
        C = expand("cov_{{type}}/{{slcname}}_{{rx}}.c{i}{j}",i=[0,1,2,3],j=[0,1,2,3]),
    output:
        cal_report = "outputs/img/{slcname}_{rx}_{type}_calibration_report.csv",
    params:
        C_root = "cov_{type}/{slcname}_{rx}",
    script:
        "scripts/TCR_recap.py"

##############################################################################
## Check phase center shift for each antenna
rule phc_recap:
    input:
        slc = "slc_{type}/{slcname}_{chan}.slc",
        slc_par = "slc_{type}/{slcname}_{chan}.slc.par"
    output:
        phase_report = "outputs/img/{slcname}_{chan}_{type}_phase_center_report.csv",
    script:
        "scripts/phase_center_recap.py"









###############################################################################
### Plot Polarimetric analysis
rule plot_polarimetric_analysis:
    input:
        C = expand("cov_{{type}}/{{slcname}}_{{rx}}_filt.c{i}{j}",i=[0,1,2,3],j=[0,1,2,3]),
#        C_gc = expand("cov_{{type}}/{{slcname}}_{{rx}}.c{i}{j}_gc",i=[0,1,2,3],j=[0,1,2,3]),
#        sh_map = "geo/{tablename}.sh_map".format(tablename=config['geocoding']['table_name']),
#        lut = "geo/{tablename}.gpri_to_dem".format(tablename=config['geocoding']['table_name']),
#        dem_seg_par = "geo/{tablename}.dem_seg.par".format(tablename=config['geocoding']['table_name']),
    params:
        cov_par =  "cov_{type}/{slcname}_{rx}.par",
        C_root = "cov_{type}/{slcname}_{rx}"
    output:
        alpha = "outputs/img/{slcname}_{rx}_{type}_gc_alpha.{ext}",
        H = "outputs/img/{slcname}_{rx}_{type}_gc_H.{ext}",
        pauli = "outputs/img/{slcname}_{rx}_{type}_gc_pauli.{ext}",
    script:
        "scripts/plot_polarimetric_analysis.py"


















